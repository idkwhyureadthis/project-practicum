// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addRestaurant = `-- name: AddRestaurant :one
INSERT INTO restaurants
(coordinates, name, open_time, close_time) VALUES
($1, $2, $3, $4)
RETURNING id
`

type AddRestaurantParams struct {
	Coordinates pgtype.Point `json:"coordinates"`
	Name        string       `json:"name"`
	OpenTime    pgtype.Time  `json:"open_time"`
	CloseTime   pgtype.Time  `json:"close_time"`
}

func (q *Queries) AddRestaurant(ctx context.Context, arg AddRestaurantParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, addRestaurant,
		arg.Coordinates,
		arg.Name,
		arg.OpenTime,
		arg.CloseTime,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const banItem = `-- name: BanItem :exec
INSERT INTO banned_items
(item_id, restaurant_id)
VALUES ($1, $2)
`

type BanItemParams struct {
	ItemID       uuid.UUID `json:"item_id"`
	RestaurantID uuid.UUID `json:"restaurant_id"`
}

func (q *Queries) BanItem(ctx context.Context, arg BanItemParams) error {
	_, err := q.db.Exec(ctx, banItem, arg.ItemID, arg.RestaurantID)
	return err
}

const checkAdmin = `-- name: CheckAdmin :one
SELECT COUNT(*) FROM admins WHERE is_superadmin = true
`

func (q *Queries) CheckAdmin(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, checkAdmin)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (login, crypted_password, restaurant_id)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateAdminParams struct {
	Login           string     `json:"login"`
	CryptedPassword string     `json:"crypted_password"`
	RestaurantID    *uuid.UUID `json:"restaurant_id"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAdmin, arg.Login, arg.CryptedPassword, arg.RestaurantID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createItem = `-- name: CreateItem :one
INSERT INTO items (name, description, sizes, prices, photos)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateItemParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Sizes       []string  `json:"sizes"`
	Prices      []float64 `json:"prices"`
	Photos      []string  `json:"photos"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createItem,
		arg.Name,
		arg.Description,
		arg.Sizes,
		arg.Prices,
		arg.Photos,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getAdmin = `-- name: GetAdmin :one
SELECT id, login, crypted_password, is_superadmin, restaurant_id, crypted_refresh FROM admins
WHERE login = $1 AND crypted_password = $2
`

type GetAdminParams struct {
	Login           string `json:"login"`
	CryptedPassword string `json:"crypted_password"`
}

func (q *Queries) GetAdmin(ctx context.Context, arg GetAdminParams) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdmin, arg.Login, arg.CryptedPassword)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.CryptedPassword,
		&i.IsSuperadmin,
		&i.RestaurantID,
		&i.CryptedRefresh,
	)
	return i, err
}

const getAdminRestaurant = `-- name: GetAdminRestaurant :one
SELECT restaurant_id from admins
WHERE id = $1
`

func (q *Queries) GetAdminRestaurant(ctx context.Context, id uuid.UUID) (*uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getAdminRestaurant, id)
	var restaurant_id *uuid.UUID
	err := row.Scan(&restaurant_id)
	return restaurant_id, err
}

const getBannedItems = `-- name: GetBannedItems :many
SELECT item_id FROM banned_items
WHERE restaurant_id = $1
`

func (q *Queries) GetBannedItems(ctx context.Context, restaurantID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getBannedItems, restaurantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var item_id uuid.UUID
		if err := rows.Scan(&item_id); err != nil {
			return nil, err
		}
		items = append(items, item_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItems = `-- name: GetItems :many
SELECT 
    i.id, i.name, i.description, i.sizes, i.prices, i.photos,
    CASE 
        WHEN bi.item_id IS NULL THEN true 
        ELSE false 
    END AS is_available
FROM items i
LEFT JOIN banned_items bi ON i.id = bi.item_id AND bi.restaurant_id = $1
`

type GetItemsRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Sizes       []string  `json:"sizes"`
	Prices      []float64 `json:"prices"`
	Photos      []string  `json:"photos"`
	IsAvailable bool      `json:"is_available"`
}

func (q *Queries) GetItems(ctx context.Context, restaurantID uuid.UUID) ([]GetItemsRow, error) {
	rows, err := q.db.Query(ctx, getItems, restaurantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemsRow
	for rows.Next() {
		var i GetItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Sizes,
			&i.Prices,
			&i.Photos,
			&i.IsAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefresh = `-- name: GetRefresh :one
SELECT crypted_refresh from admins
WHERE id = $1
`

func (q *Queries) GetRefresh(ctx context.Context, id uuid.UUID) (*string, error) {
	row := q.db.QueryRow(ctx, getRefresh, id)
	var crypted_refresh *string
	err := row.Scan(&crypted_refresh)
	return crypted_refresh, err
}

const getRestaurants = `-- name: GetRestaurants :many
SELECT id, coordinates, name, open_time, close_time FROM restaurants
`

func (q *Queries) GetRestaurants(ctx context.Context) ([]Restaurant, error) {
	rows, err := q.db.Query(ctx, getRestaurants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Restaurant
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(
			&i.ID,
			&i.Coordinates,
			&i.Name,
			&i.OpenTime,
			&i.CloseTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setupAdmin = `-- name: SetupAdmin :exec
INSERT INTO admins
(login, crypted_password, is_superadmin)
VALUES ($1, $2, $3)
`

type SetupAdminParams struct {
	Login           string `json:"login"`
	CryptedPassword string `json:"crypted_password"`
	IsSuperadmin    bool   `json:"is_superadmin"`
}

func (q *Queries) SetupAdmin(ctx context.Context, arg SetupAdminParams) error {
	_, err := q.db.Exec(ctx, setupAdmin, arg.Login, arg.CryptedPassword, arg.IsSuperadmin)
	return err
}

const unbanItem = `-- name: UnbanItem :exec
DELETE FROM banned_items
WHERE item_id = $1 AND restaurant_id = $2
`

type UnbanItemParams struct {
	ItemID       uuid.UUID `json:"item_id"`
	RestaurantID uuid.UUID `json:"restaurant_id"`
}

func (q *Queries) UnbanItem(ctx context.Context, arg UnbanItemParams) error {
	_, err := q.db.Exec(ctx, unbanItem, arg.ItemID, arg.RestaurantID)
	return err
}

const updateRefresh = `-- name: UpdateRefresh :exec
UPDATE admins
SET crypted_refresh = $1 where id = $2
`

type UpdateRefreshParams struct {
	CryptedRefresh *string   `json:"crypted_refresh"`
	ID             uuid.UUID `json:"id"`
}

func (q *Queries) UpdateRefresh(ctx context.Context, arg UpdateRefreshParams) error {
	_, err := q.db.Exec(ctx, updateRefresh, arg.CryptedRefresh, arg.ID)
	return err
}
